#!/bin/zsh
# Required arguments
dmg_url="$1"
hash="$2"

# VERSION awareness
version="0.0.1"

# Hardcode PATH to ensure MacOS-provided executables are exclusively used
# Reminder, BSD tools are quite different from GNU tooling
PATH="/bin:/usr/bin:/sbin:/usr/sbin"

# Directories for cart to work with
downloads="/tmp/cart/downloads"
mountpoints="/tmp/cart/mountpoints"

# Only support MacOS
# Allow printing usage on Linux for CI
if ! uname | grep -qE '^Darwin'
then
    echo "Did not detect MacOS. Exiting."
    exit 1
fi

# Usage if no argument provided
[[ -z "${dmg_url}" ]] && printf "Usage: $0 \"https://github.com/<some-repo>/releases/download/<some-release>/<some-app>.dmg\" \"sha256-hash\"\nVersion: ${version}" && exit 0

mkdir -p "$HOME/Applications" "${mountpoints}" "${downloads}"

# Download filename
echo "Downloading ${dmg_url}..."
filename="$(curl --progress-bar --output-dir "${downloads}" -OJsL "${dmg_url}" -w "%{filename_effective}")"
echo "Output file: ${filename}"

# If hash provided, ensure it matches
if [[ -n "${hash}" ]]
then
    filehash="$(shasum -a 256 ${filename} | awk '{print $1}')"
    if [[ "${hash}" != "${filehash}" ]]
    then
        printf "Incorrect file hash provided.\n${filename} hash: ${filehash}\nExiting." && exit 3
    else
        printf "File hash looks good.\n"
    fi
fi

# Ensure that file is a dmg file before continuing
if ! echo "Ensuring ${filename} integrity" && hdiutil verify "${filename}" > /dev/null
then
    echo "File ${filename} failed dmg integrity check. Cleaning up and Exiting."
    rm -f "${filename}"
    exit 2
fi

# Mount dmg if it doesn't exist
basename="$(basename "${filename}")"
[[ -e "${mountpoints}/${basename}" ]] || echo "Mounting ${mountpoints}/${basename}." && hdiutil attach -mountpoint "${mountpoints}/${basename}" "${filename}" > /dev/null

# Install .app if found
if find "${mountpoints}/${basename}" -maxdepth 1 -name "*.app" &>/dev/null
then
    appfilepath="$(find "${mountpoints}/${basename}" -maxdepth 1 -name "*.app")"
    appfile="$(basename ${appfilepath})"
    target="$HOME/Applications/"
    rsync -a --delete "${appfilepath}" "${target}"
else
    echo "Unable to find .app in ${mountpoints}/${basename}."
fi

# Cleanup
[[ -e "${mountpoints}/${basename}" ]] && echo "Unmounting ${mountpoints}/${basename}." && hdiutil detach "${mountpoints}/${basename}" > /dev/null
[[ -e "${downloads}/${basename}" ]] && echo "Cleaning up ${downloads}/${basename}." && rm -rf "${downloads}/${basename}"
